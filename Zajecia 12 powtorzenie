1.Napisz program, który prosi użytkownika o wpisanie dwóch liczb, a następnie dzieli pierwszą liczbę przez drugą.
Program powinien obsługiwać dwa rodzaje wyjątków: ArithmeticException w przypadku dzielenia przez zero i InputMismatchException, gdy użytkownik wprowadzi coś innego niż liczby. 
W obu przypadkach należy wyświetlić stosowny komunikat błędu i poprosić użytkownika o ponowne wprowadzenie danych. Wykorzystaj typ int.

import java.util.InputMismatchException;
import java.util.Scanner;

public class main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            try {
                System.out.println("Podaj a:");
                int a = scanner.nextInt();
                System.out.println("Podaj b:");
                int b = scanner.nextInt();
                System.out.println(podziel(a, b));
                break;
            } catch (ArithmeticException e) {
                System.out.println("nie można dzielić przez 0");
            } catch (InputMismatchException f) {
                System.out.println("Brak danych");
                scanner.nextLine();
            }
        }
    }
    private static int podziel(int a, int b)
    {
        if (b == 0) {
            throw new ArithmeticException("Nie można dzielić przez zero.");
        }
        return a / b;
    }
}

2.Zaprojektuj i zaimplementuj klasę wyjątku NiepoprawnyFormatDanychException, która będzie rozszerzać klasę Exception. 
Następnie napisz metodę sprawdzFormatDanych(String dane), która rzuci wyjątek NiepoprawnyFormatDanychException, jeśli podany ciąg znaków nie odpowiada określonemu wzorcowi (np. nie jest adresem e-mail). 
W metodzie main przetestuj działanie tej metody, obsługując wyjątek i informując użytkownika o błędzie.

public class NiepoprawnyFormatDanychException extends Exception {
    public NiepoprawnyFormatDanychException(String message) {
        super(message);
    }
}

public class Main {
    public static void main(String[] args) {
        try {
            String poprawnyEmail = "jan@example.com";
            sprawdzFormatDanych(poprawnyEmail);
            
            String niepoprawnyEmail = "jan_example.com";
            sprawdzFormatDanych(niepoprawnyEmail); // To spowoduje wyjątek

        } catch (NiepoprawnyFormatDanychException e) {
            System.out.println("Błąd: " + e.getMessage());
        }
    }

    private static void sprawdzFormatDanych(String dane) throws NiepoprawnyFormatDanychException {
        // Tutaj możesz umieścić kod sprawdzający format danych
        // Na przykład, sprawdź, czy ciąg znaków jest poprawnym adresem e-mail

        if (!dane.matches("[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}")) {
            throw new NiepoprawnyFormatDanychException("Niepoprawny format danych. Oczekiwany format: jan@example.com");
        }

        // Jeśli format jest poprawny, można kontynuować działanie programu
        System.out.println("Dane są w poprawnym formacie: " + dane);
    }
}

3.Napisz klasę Product, która zawiera pola: name (typu String), price (typu double) i productionYear (typu int).
Zaimplementuj interfejs Comparable w taki sposób, aby obiekty klasy Product były sortowane rosnąco według daty produkcji. 
Stwórz listę tablicową 5 obiektów klasy Product i posortuj ją według sprecyzowanego kryterium.

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Product implements Comparable<Product> {
    private String name;
    private double price;
    private int productionYear;

    public Product(String name, double price, int productionYear) {
        this.name = name;
        this.price = price;
        this.productionYear = productionYear;
    }

    // Gettery i settery (nie przedstawione dla czytelności)

    @Override
    public int compareTo(Product other) {
        // Implementacja porównania według daty produkcji
        return Integer.compare(this.productionYear, other.productionYear);
    }

    @Override
    public String toString() {
        return "Product{" +
                "name='" + name + '\'' +
                ", price=" + price +
                ", productionYear=" + productionYear +
                '}';
    }

    public static void main(String[] args) {
        // Tworzenie listy 5 obiektów klasy Product
        List<Product> productList = new ArrayList<>();
        productList.add(new Product("Laptop", 1500.0, 2020));
        productList.add(new Product("Smartphone", 800.0, 2022));
        productList.add(new Product("Camera", 500.0, 2019));
        productList.add(new Product("Headphones", 100.0, 2021));
        productList.add(new Product("Tablet", 400.0, 2023));

        // Sortowanie listy używając interfejsu Comparable
        Collections.sort(productList);

        // Wyświetlenie posortowanej listy
        for (Product product : productList) {
            System.out.println(product);
        }
    }
}
