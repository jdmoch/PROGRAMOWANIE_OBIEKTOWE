1.Wykonaj poniższe czynności:
Stwórz interfejs Printer z metodą drukuj(String tekst).Utwórz klasę StandardowyPrinter, która implementuje Printer i wypisuje tekst na konsolę.
Utwórz klasę Biuro, która posiada prywatne pole typu Printer. W konstruktorze Biuro przyjmij Printer jako argument i przypisz go do pola. 
Dodaj metodę drukujDokument(String tekst), która będzie delegować zadanie drukowania do obiektu klasy Printer.

// Interfejs Printer
interface Printer {
    void drukuj(String tekst);
}

// Klasa StandardowyPrinter implementująca interfejs Printer
class StandardowyPrinter implements Printer {
    @Override
    public void drukuj(String tekst) {
        System.out.println("Drukuję tekst: " + tekst);
    }
}

// Klasa Biuro z polem typu Printer
class Biuro {
    private Printer printer;

    // Konstruktor Biuro przyjmujący Printer jako argument
    public Biuro(Printer printer) {
        this.printer = printer;
    }

    // Metoda drukujDokument delegująca drukowanie do obiektu Printer
    public void drukujDokument(String tekst) {
        printer.drukuj(tekst);
    }
}

// Przykładowy test
public class Main {
    public static void main(String[] args) {
        // Tworzymy obiekt StandardowyPrinter
        StandardowyPrinter standardowyPrinter = new StandardowyPrinter();

        // Tworzymy obiekt Biuro, przekazując obiekt StandardowyPrinter jako argument
        Biuro biuro = new Biuro(standardowyPrinter);

        // Wywołujemy metodę drukujDokument w Biuro
        biuro.drukujDokument("To jest jakiś dokument.");
    }
}


2.Wykonaj poniższe czynności:
Stwórz interfejs Silnik z metodami uruchom() i zatrzymaj().Utwórz klasę BenzynowySilnik, która implementuje Silnik i symuluje działanie silnika na benzynę.
Utwórz klasę Samochód, która posiada prywatne pole typu Silnik. 
W konstruktorze przyjmij Silnik jako argument. Dodaj metody start() i stop(), które będą delegować odpowiednio zadanie uruchomienia i zatrzymania silnika do obiektu klasy Silnik.

// Interfejs Silnik
interface Silnik {
    void uruchom();
    void zatrzymaj();
}

// Klasa BenzynowySilnik implementująca interfejs Silnik
class BenzynowySilnik implements Silnik {
    @Override
    public void uruchom() {
        System.out.println("Silnik na benzynę uruchomiony.");
    }

    @Override
    public void zatrzymaj() {
        System.out.println("Silnik na benzynę zatrzymany.");
    }
}

// Klasa Samochód z polem typu Silnik
class Samochód {
    private Silnik silnik;

    // Konstruktor Samochód przyjmujący Silnik jako argument
    public Samochód(Silnik silnik) {
        this.silnik = silnik;
    }

    // Metoda start() delegująca uruchomienie silnika do obiektu Silnik
    public void start() {
        silnik.uruchom();
    }

    // Metoda stop() delegująca zatrzymanie silnika do obiektu Silnik
    public void stop() {
        silnik.zatrzymaj();
    }
}

// Przykładowy test
public class Main {
    public static void main(String[] args) {
        // Tworzymy obiekt BenzynowySilnik
        BenzynowySilnik benzynowySilnik = new BenzynowySilnik();

        // Tworzymy obiekt Samochód, przekazując obiekt BenzynowySilnik jako argument
        Samochód samochód = new Samochód(benzynowySilnik);

        // Wywołujemy metody start() i stop() w Samochód
        samochód.start();
        samochód.stop();
    }
}


3.Wykonaj poniższe czynności:
Stwórz interfejs Powiadomienie z metodą wyślij(String wiadomość).
Utwórz klasę Email, która implementuje Powiadomienie i symuluje wysyłanie wiadomości e-mail.Utwórz klasę Użytkownik, która posiada prywatne pole typu Powiadomienie. 
W konstruktorze przyjmij Powiadomienie jako argument. Dodaj metodę powiadomOModernizacji(String informacja), która będzie delegować zadanie wysyłania powiadomienia do obiektu klasy Powiadomienie.

4.Napisz program, który definiuje metodę checkAge(int age). Metoda ta powinna rzucić wyjątek IllegalArgumentException z odpowiednim komunikatem, jeśli podany wiek jest mniejszy niż 18. 
W głównej metodzie programu (main) wywołaj checkAge z różnymi wartościami i obsłuż wyjątek, wyświetlając stosowny komunikat dla użytkownika.

5.Napisz program, który prosi użytkownika o wpisanie dwóch liczb, a następnie dzieli pierwszą liczbę przez drugą.
Program powinien obsługiwać dwa rodzaje wyjątków: ArithmeticException w przypadku dzielenia przez zero i InputMismatchException, gdy użytkownik wprowadzi coś innego niż liczby. 
W obu przypadkach należy wyświetlić stosowny komunikat błędu i poprosić użytkownika o ponowne wprowadzenie danych. Wykorzystaj typ int.

6.Zaprojektuj i zaimplementuj klasę wyjątku NiepoprawnyFormatDanychException, która będzie rozszerzać klasę Exception. 
Następnie napisz metodę sprawdzFormatDanych(String dane), która rzuci wyjątek NiepoprawnyFormatDanychException, jeśli podany ciąg znaków nie odpowiada określonemu wzorcowi (np. nie jest adresem e-mail). 
W metodzie main przetestuj działanie tej metody, obsługując wyjątek i informując użytkownika o błędzie.
