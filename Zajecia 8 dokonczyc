Przykladowe

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class oosoba implements Comparable<oosoba>, Cloneable
{
    String name;
    double height;
    int age;

    public oosoba(String name, double height, int age) {
        this.name = name;
        this.height = height;
        this.age = age;
    }

    public oosoba(int age) {
        this.age = age;
        name = "Jan";
        height = 170;
    }

    public oosoba(double height) {
        this.height = height;
    }

    public oosoba(double height, int age) {
        this.height = height;
        this.age = age;
    }

    @Override
    public String toString()
    {
        return " " + height+" "+age + " ";
    }

    public static void main(String[] args)
    {
        ArrayList<oosoba> oosobaList = new ArrayList<>();
        oosobaList.add(new oosoba(156.0, 15));
        oosobaList.add(new oosoba(158.0,18));
        oosobaList.add(new oosoba(156.0, 24));
        oosobaList.add(new oosoba(176.0,18));
        System.out.println(oosobaList);
        //Collections.sort(oosobaList,new oosobaHeightComparator());
        oosobaList.sort(new oosobaHeightComparator());
        System.out.println(oosobaList);
        ArrayList<oosoba> oosobaList2 = new ArrayList<>();
        oosobaList2.add(new oosoba(156.0, 15));
        oosobaList2.add(new oosoba(158.0,18));
        oosobaList2.add(new oosoba(156.0, 24));
        oosobaList2.add(new oosoba(176.0,18));
        //Collections.sort(oosobaList2,new oosobaAgeComparator().reversed());
        oosobaList2.sort(new oosobaAgeComparator());
        System.out.println(oosobaList2);

    }
    @Override
    public int compareTo(oosoba o)
    {
        //return Double.compare(o.height,this.height);
        //return (int) Math.signum(o.height - this.height);
        if (Double.compare(o.height,this.height) == 0)
        {
            return Integer.compare(o.age,this.age);
        }
        return Double.compare(o.height,this.height);
    }

    @Override
    protected Object clone() throws CloneNotSupportedException
    {
        return super.clone();
    }
}
class oosobaHeightComparator implements Comparator<oosoba>
{

    @Override
    public int compare(oosoba o1, oosoba o2) {
        return Double.compare(o2.height, o1.height); //O2 na poczatku = od najwyzszych
    }
}
class oosobaAgeComparator implements Comparator<oosoba>
{

    @Override
    public int compare(oosoba o1, oosoba o2) {
        return Integer.compare(o2.age,o1.age);
    }
}

INNY MAIN

public class Main {
    public static void main(String[] args) throws CloneNotSupportedException
    {
        oosoba o1 = new oosoba("Stefan",182,21);
        oosoba o2 = (oosoba) o1.clone();
        System.out.println(o1 + " " + o2);
        o2.age=95;
        System.out.println(o1 + " " + o2);
    }

}

Zad.1
Napisz klasę Ksiazka, która zawiera pola: tytul (typu String), liczbaStron (typu int) i dataWydania (typu LocalDate). 
Zaimplementuj interfejs Comparable w taki sposób, aby obiekty klasy Ksiazka były sortowane malejąco według liczby stron. 
Stwórz tablicę 4 obiektów klasy Ksiazka i posortuj ją według sprecyzowanego kryterium.
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Ksiazka implements Comparable<Ksiazka> {
    String tytul;
    int liczbaStron;
    LocalDate dataWydarzenia;

    public Ksiazka(String tytul, int liczbaStron, LocalDate dataWydarzenia) {
        this.tytul = tytul;
        this.liczbaStron = liczbaStron;
        this.dataWydarzenia = dataWydarzenia;
    }

    public String getTytul() {
        return tytul;
    }

    public int getLiczbaStron() {
        return liczbaStron;
    }

    public LocalDate getDataWydarzenia() {
        return dataWydarzenia;
    }

    public Ksiazka() {
    }

    @Override
    public int compareTo(Ksiazka o) {
        return Integer.compare(o.liczbaStron, this.liczbaStron);
    }

    @Override
    public String toString() {
        return " Ksiazka " +
                " tytul " + tytul +
                " liczbaStron " + liczbaStron +
                " dataWydarzenia " + dataWydarzenia;
    }

    public static void main(String[] args) {
        ArrayList<Ksiazka> KsiazkaList = new ArrayList<>();
        KsiazkaList.add(new Ksiazka("wiedzmin", 400, LocalDate.of(1993, 5, 1)));
        KsiazkaList.add(new Ksiazka("ugabuga", 4030, LocalDate.of(1923, 1, 5)));
        KsiazkaList.add(new Ksiazka("ddd", 410, LocalDate.of(1323, 4, 2)));
        KsiazkaList.add(new Ksiazka("dasd", 123, LocalDate.of(1634, 11, 3)));
        System.out.println(KsiazkaList);
        Collections.sort(KsiazkaList);
        System.out.println(KsiazkaList);
    }
}

Zad.2
Napisz klasę Samochod, która zawiera pola: marka (typu String), przebieg (typu int) i rokProdukcji (typu int). 
Zaimplementuj interfejs Comparable w taki sposób, aby obiekty klasy Samochod były sortowane rosnąco według przebiegu. Stwórz tablicę 4 obiektów klasy Samochod i posortuj ją według sprecyzowanego kryterium.

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

public class Samochod implements Comparable<Samochod> {

    private String marka;
    private int przebieg;
    private int rokProdukcji;

    public Samochod(String marka, int przebieg, int rokProdukcji) {
        this.marka = marka;
        this.przebieg = przebieg;
        this.rokProdukcji = rokProdukcji;
    }

    public String getMarka() {
        return marka;
    }

    public int getPrzebieg() {
        return przebieg;
    }

    public int getRokProdukcji() {
        return rokProdukcji;
    }

    @Override
    public int compareTo(Samochod innySamochod) {
        // Porównanie rosnące według przebiegu
        return Integer.compare(przebieg,innySamochod.przebieg);
    }

    @Override
    public String toString() {
        return "Marka: " + marka +
                ", Przebieg: " + przebieg +
                ", Rok produkcji: " + rokProdukcji;
    }

    public static void main(String[] args)
    {
        ArrayList<Samochod> SamochodList = new ArrayList<>();
        SamochodList.add(new Samochod("subaru", 123123, 2019));
        SamochodList.add(new Samochod("Ford", 120000, 2018));
        SamochodList.add(new Samochod("Honda", 220000, 2011));
        Collections.sort(SamochodList);
        System.out.println(SamochodList);

    }
}

Zad.3
Napisz klasę Zamowienie, która zawiera pola: nazwaProduktu (typu String), ilosc (typu int) i cenaJednostkowa (typu double). 
Zaimplementuj interfejs Comparable w taki sposób, aby obiekty klasy Zamowienie były sortowane według jednego kryterium: malejąco według ceny jednostkowej, a przy równości sortowane były rosnąco według ilości. 
Stwórz listę tablicową 4 obiektów klasy Zamowienie i posortuj ją według sprecyzowanego kryterium.

import java.util.Arrays;

public class Zamowienie implements Comparable<Zamowienie> {

    private String nazwaProduktu;
    private int ilosc;
    private double cenaJednostkowa;

    public Zamowienie(String nazwaProduktu, int ilosc, double cenaJednostkowa) {
        this.nazwaProduktu = nazwaProduktu;
        this.ilosc = ilosc;
        this.cenaJednostkowa = cenaJednostkowa;
    }

    public String getNazwaProduktu() {
        return nazwaProduktu;
    }

    public int getIlosc() {
        return ilosc;
    }

    public double getCenaJednostkowa() {
        return cenaJednostkowa;
    }

    @Override
    public int compareTo(Zamowienie inneZamowienie) {
        // Porównanie malejące według ceny jednostkowej
        int porownanieCeny = Double.compare(inneZamowienie.cenaJednostkowa, this.cenaJednostkowa);
        
        if (porownanieCeny != 0) {
            return porownanieCeny;
        } else {
            // W przypadku równości cen, porównaj rosnąco według ilości
            return Integer.compare(this.ilosc, inneZamowienie.ilosc);
        }
    }

    public static void main(String[] args) {
        Zamowienie[] zamowienia = new Zamowienie[4];
        zamowienia[0] = new Zamowienie("Produkt A", 5, 10.0);
        zamowienia[1] = new Zamowienie("Produkt B", 3, 15.0);
        zamowienia[2] = new Zamowienie("Produkt C", 2, 10.0);
        zamowienia[3] = new Zamowienie("Produkt D", 4, 12.0);

        // Sortowanie tablicy obiektów klasy Zamowienie
        Arrays.sort(zamowienia);

        // Wyświetlanie posortowanej tablicy
        for (Zamowienie zamowienie : zamowienia) {
            System.out.println("Produkt: " + zamowienie.getNazwaProduktu() +
                    ", Ilość: " + zamowienie.getIlosc() +
                    ", Cena jednostkowa: " + zamowienie.getCenaJednostkowa());
        }
    }
}

Zad.4
Napisz klasę Order z polami id (typu int), customerName (typu String) oraz orderDate (typu LocalDate).
Stwórz nową klasę i zaimplementuj w niej interfejs Comparator do porównywania obiektów po polu orderDate (od najwcześniejszej do najpóźniejszej daty), a w przypadku równości po polu id. 
Stwórz listę 5 obiektów klasy Order i posortuj ją zgodnie z opisanym kryterium.

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class Order {
    private int id;
    private String customerName;
    private LocalDate orderDate;

    public Order(int id, String customerName, LocalDate orderDate) {
        this.id = id;
        this.customerName = customerName;
        this.orderDate = orderDate;
    }

    public int getId() {
        return id;
    }

    public String getCustomerName() {
        return customerName;
    }

    public LocalDate getOrderDate() {
        return orderDate;
    }
}

class OrderComparator implements Comparator<Order> {
    @Override
    public int compare(Order o1, Order o2) {
        int dateComparison = o1.getOrderDate().compareTo(o2.getOrderDate());

        if (dateComparison == 0) {
            // If dates are equal, compare by id
            return Integer.compare(o1.getId(), o2.getId());
        }

        return dateComparison;
    }
}

public class OrderTest {
    public static void main(String[] args) {
        List<Order> orders = new ArrayList<>();
        orders.add(new Order(1, "Customer A", LocalDate.of(2022, 1, 15)));
        orders.add(new Order(2, "Customer B", LocalDate.of(2022, 1, 10)));
        orders.add(new Order(3, "Customer C", LocalDate.of(2022, 1, 12)));
        orders.add(new Order(4, "Customer D", LocalDate.of(2022, 1, 8)));
        orders.add(new Order(5, "Customer E", LocalDate.of(2022, 1, 10)));

        // Sort orders using the OrderComparator
        Collections.sort(orders, new OrderComparator());

        // Display sorted orders
        for (Order order : orders) {
            System.out.println("Order ID: " + order.getId() +
                    ", Customer: " + order.getCustomerName() +
                    ", Order Date: " + order.getOrderDate());
        }
    }
}


Zad.5
Napisz klasę Song z polami title (typu String), artist (typu String) oraz duration (typu int). 
Stwórz nową klasę i zaimplementuj w niej interfejs Comparator do porównywania obiektów po polu duration (od najkrótszej do najdłuższej piosenki), a w przypadku równości po polu title. Stwórz tablicę 5 obiektów klasy Song i posortuj ją zgodnie z opisanym kryterium.

import java.util.Arrays;
import java.util.Comparator;

class Song {
    private String title;
    private String artist;
    private int duration; // czas trwania w sekundach

    public Song(String title, String artist, int duration) {
        this.title = title;
        this.artist = artist;
        this.duration = duration;
    }

    public String getTitle() {
        return title;
    }

    public String getArtist() {
        return artist;
    }

    public int getDuration() {
        return duration;
    }
}

class SongComparator implements Comparator<Song> {
    @Override
    public int compare(Song song1, Song song2) {
        int durationComparison = Integer.compare(song1.getDuration(), song2.getDuration());

        if (durationComparison == 0) {
            // If durations are equal, compare by title
            return song1.getTitle().compareTo(song2.getTitle());
        }

        return durationComparison;
    }
}

public class SongTest {
    public static void main(String[] args) {
        Song[] songs = {
                new Song("Song A", "Artist X", 180),
                new Song("Song B", "Artist Y", 240),
                new Song("Song C", "Artist Z", 200),
                new Song("Song D", "Artist X", 210),
                new Song("Song E", "Artist Y", 180)
        };

        // Sort songs using the SongComparator
        Arrays.sort(songs, new SongComparator());

        // Display sorted songs
        for (Song song : songs) {
            System.out.println("Title: " + song.getTitle() +
                    ", Artist: " + song.getArtist() +
                    ", Duration: " + song.getDuration() + " seconds");
        }
    }
}

Zad.6
Napisz klasę Student z polami id (typu int), name (typu String) oraz averageGrade (typu double). Zaimplementuj dwie klasy implementujące generyczny interfejs Comparator: AverageGradeComparator do porównywania obiektów po polu averageGrade (od najwyższej do najniższej średniej ocen) oraz IdComparator do porównywania obiektów po polu id (od najniższego do najwyższego identyfikatora).
Stwórz listę 5 obiektów klasy Student i posortuj ją zgodnie z oboma kryteriami (najpierw po średniej ocen, a następnie po identyfikatorze).
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class Student {
    private int id;
    private String name;
    private double averageGrade;

    public Student(int id, String name, double averageGrade) {
        this.id = id;
        this.name = name;
        this.averageGrade = averageGrade;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public double getAverageGrade() {
        return averageGrade;
    }
}

class AverageGradeComparator implements Comparator<Student> {
    @Override
    public int compare(Student student1, Student student2) {
        return Double.compare(student2.getAverageGrade(), student1.getAverageGrade());
    }
}

class IdComparator implements Comparator<Student> {
    @Override
    public int compare(Student student1, Student student2) {
        return Integer.compare(student1.getId(), student2.getId());
    }
}

public class StudentTest {
    public static void main(String[] args) {
        List<Student> students = new ArrayList<>();
        students.add(new Student(1, "Alice", 85.5));
        students.add(new Student(2, "Bob", 78.0));
        students.add(new Student(3, "Charlie", 92.3));
        students.add(new Student(4, "David", 79.8));
        students.add(new Student(5, "Eva", 88.2));

        // Sort students by AverageGradeComparator
        Collections.sort(students, new AverageGradeComparator());
        System.out.println("Sorted by Average Grade:");
        displayStudents(students);

        // Sort students by IdComparator
        Collections.sort(students, new IdComparator());
        System.out.println("\nSorted by Id:");
        displayStudents(students);
    }

    private static void displayStudents(List<Student> students) {
        for (Student student : students) {
            System.out.println("ID: " + student.getId() +
                    ", Name: " + student.getName() +
                    ", Average Grade: " + student.getAverageGrade());
        }
    }
}

Zad.7
Napisz klasę Athlete z dwoma polami: name (String) i lapTimes (lista tablicowa zmiennych typu Integer, reprezentująca czas w sekundach potrzebny na przebiegnięcie okrążenia podczas różnych prób). Zaimplementuj interfejs Cloneable i nadpisz metodę clone(), aby móc klonować obiekty tej klasy.
W metodzie main() utwórz obiekt Athlete, sklonuj go, a następnie zmień czas na pozycji 3 oryginalnego sportowca. Wyświetl czasy obu sportowców, aby zobaczyć, czy są niezależne.
