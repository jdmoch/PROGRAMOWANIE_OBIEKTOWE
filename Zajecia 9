//Załóżmy, że mamy interfejs MusicPlayer z metodami turnOn(), turnOff() i nextTrack(). Stwórz klasę Radio, która będzie implementować ten interfejs. 
//W metodzie turnOn() powinien zostać wydrukowany komunikat “Radio włączone”, w metodzie turnOff() - “Radio wyłączone”, a w nextTrack() - “Zmieniono stację radiową”.

interface Musicplayer
{
    void turnon();
    void turnoff();
    void nextTrack();
}

class Radio implements Musicplayer
{
    @Override
    public void turnon() {
        System.out.println("Radio wlaczone");
    }

    @Override
    public void turnoff() {
        System.out.println("Radio wylacozne");
    }
    @Override
    public void nextTrack() {
        System.out.println("Nastepny utwor");
    }
}

public class Main
{
    public static void main(String[] args)
    {
        Radio radio = new Radio();

        radio.turnon();
        radio.nextTrack();
        radio.turnoff();
    }
}
//Opracuj interfejs MediaPlayer z trzema abstrakcyjnymi metodami: play(String trackName) zwracającą void, pause() zwracającą void oraz getCurrentTrack() zwracającą String.
//Stwórz dwie klasy AudioPlayer i VideoPlayer, które implementują ten interfejs. W osobnej klasie MediaPlayerTest sprawdź działanie metod dla obiektów z obu klas.

interface Mediaplayer
{
    abstract void play(String trackname);
    abstract void pause();
    abstract String getCurrentTrack();
}

class Audioplayer implements Mediaplayer
{
    private String currentTrack;
    @Override
    public void play(String trackname)
    {
        System.out.println("Odtwarzanie utworu: " +trackname);
        currentTrack = trackname;
    }
    @Override
    public void pause() {
        System.out.println("Odtwarzanie zatrzymane");
    }
    @Override
    public String getCurrentTrack() {
        return currentTrack;
    }
}

class VideoPlayer implements Mediaplayer {
    private String currentTrack;

    @Override
    public void play(String trackName) {
        System.out.println("Odtwarzanie filmu: " + trackName);
        currentTrack = trackName;
    }

    @Override
    public void pause() {
        System.out.println("Odtwarzanie filmu zatrzymane");
    }

    @Override
    public String getCurrentTrack() {
        return currentTrack;
    }
}
public class MediaPlayerTest
{
    public static void main(String[] args)
    {
        Audioplayer audioplayer = new Audioplayer();
        audioplayer.play("Piosenka");
        System.out.println("Aktualny utwór "+ audioplayer.getCurrentTrack());
        audioplayer.pause();

        VideoPlayer videoPlayer = new VideoPlayer();
        videoPlayer.play("Film 1");
        System.out.println("Aktualny utwór: " + videoPlayer.getCurrentTrack());
        videoPlayer.pause();
    }
}
//Stwórz interfejs Storage z trzema metodami abstrakcyjnymi: save(String data) zwracającą boolean, delete(String identifier) zwracającą boolean oraz retrieve(String identifier) zwracającą String. 
//Zaprojektuj dwie klasy FileStorage i DatabaseStorage, które implementują ten interfejs. W klasie StorageTest wykonaj testy metod dla obiektów z obu klas.

interface Storage
{
    abstract boolean save(String data);
    abstract boolean delete(String identifier);
    abstract String retrieve(String identifier);
}

class FileStorage implements Storage
{

    @Override
    public boolean save(String data)
    {
        System.out.println("Zapisane dane do pliku "+ data);
        return true;

    }
    @Override
    public boolean delete(String identifier)
    {
        System.out.println("Usuniete ze storage o nazwie: " + identifier);
        return true;
    }
    @Override
    public String retrieve(String identifier)
    {
        System.out.println("Dane pobrane o identyfikatorze " + identifier);
        return "Pobrane dane z bazy danych";
    }
}

class DatabaseStorage implements Storage
{
    @Override
    public boolean save(String data)
    {
        System.out.println("Zapisane dane do bazy "+ data);
        return false;

    }
    @Override
    public boolean delete(String identifier)
    {
        System.out.println("dane usuniete z bazy " + identifier);
        return true;
    }
    @Override
    public String retrieve(String identifier)
    {
        System.out.println("Dane pobrane o identyfikatorze " + identifier);
        return "Pobrane dane z bazy danych";
    }

}

public class StorageTest
{
    public static void main(String[] args)
    {
        {
            Storage fileStorage = new FileStorage();
            fileStorage.save("Abcd");
            fileStorage.retrieve("123");
            fileStorage.delete("456");

            Storage databaseStorage = new DatabaseStorage();
            databaseStorage.save("Efgh");
            databaseStorage.retrieve("789");
            databaseStorage.delete("012");
        }
    }
}
//Wykonaj poniższe czynności:
Utwórz interfejs VehicleManager z dwoma metodami abstrakcyjnymi: startEngine() zwracającą String i getFuelLevel() zwracającą int.
Stwórz klasę Car, implementującą VehicleManager. W metodzie startEngine zwróć “Silnik samochodu uruchomiony”, a w getFuelLevel zwróć wartość 50.
Stwórz klasę Motorcycle, również implementującą VehicleManager. W startEngine zwróć “Silnik motocykla uruchomiony”, a w getFuelLevel zwróć wartość 30.
W klasie VehicleManagerTest stwórz obiekty obu klas i przetestuj ich metody.

interface VehicleManager {
    String startEngine();
    int getFuelLevel();
}

// Implementacja klasy Car
class Car implements VehicleManager {
    @Override
    public String startEngine() {
        return "Silnik samochodu uruchomiony";
    }

    @Override
    public int getFuelLevel() {
        return 50;
    }
}

// Implementacja klasy Motorcycle
class Motorcycle implements VehicleManager {
    @Override
    public String startEngine() {
        return "Silnik motocykla uruchomiony";
    }

    @Override
    public int getFuelLevel() {
        return 30;
    }
}

// Klasa do testowania VehicleManager
public class VehicleManagerTest {
    public static void main(String[] args) {
        // Testowanie klasy Car
        VehicleManager car = new Car();
        System.out.println(car.startEngine());
        System.out.println("Poziom paliwa: " + car.getFuelLevel());

        // Testowanie klasy Motorcycle
        VehicleManager motorcycle = new Motorcycle();
        System.out.println(motorcycle.startEngine());
        System.out.println("Poziom paliwa: " + motorcycle.getFuelLevel());
    }
}

//Stwórz interfejs o nazwie MyComparator, który będzie zawierał metodę compare(int a, int b): int. 
//Metoda ta powinna zwrócić -1, jeśli a < b, 0 jeśli a == b i 1 jeśli a > b. 
//Następnie stwórz klasę TestMyComparator, która będzie implementować ten interfejs. W klasie tej zaimplementuj metodę compare zgodnie z jej opisem.

import java.util.Comparator;

interface MyComparator
{
    abstract int compare(int a,int b);
}

class comparator implements MyComparator
{
    public int compare(int a, int b){
        if(a<b){
            return -1;
        }
        if(a==b){
            return 0;
        }
        else{
            return 1;
        }
    }
}

public class TestMyComparator
{
    public static void main(String[] args)
    {
        MyComparator comparator1 = new comparator();
        System.out.println(comparator1.compare(5,5));
    }
}
