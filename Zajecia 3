Plik House.java
public class House {
    public int area; // powierzchnia
    public boolean garage; //czy ma garaz
    public int rooms; //ile pokoi
    public boolean garden; //czy ma ogrod
    public int floors; //ile ma pieter

    public int getValue()
    {
        return area * 3000;
    }
}

Plik Main.java
public class Main
{
    public static void main(String[] args)
    {
        House domStefana = new House();
        domStefana.garage = true;
        domStefana.rooms = 6;
        domStefana.area = 150;
        domStefana.floors = 2;
        domStefana.garden = false;

        System.out.println(domStefana.getValue());

        House domSylwii = new House();
        domSylwii.garden = true;
        domSylwii.garage = false;
        domSylwii.area = 175;
        domSylwii.rooms = 4;
        domSylwii.floors = 2;

        System.out.println(domSylwii.getValue());

    }
}

//Utwórz klasę Dog z polami: name, breed i age. Napisz metodę bark(), która wydrukuje na konsoli "Hau Hau".Stwórz przypadek testowy, aby wywołać metodę co najmniej jeden raz.
public class Main
{
    public static void main(String[] args)
    {
    Dog Pies = new Dog();
    Pies.name = "Roman";
    Pies.breed = "Kundel";
    Pies.age = 3;

    Pies.bark();
    }
}
public class Dog {
    public String name;
    public String breed;
    public int age;

    public void bark()
    {
        System.out.println("Hau Hau");
    }
}
//Stwórz klasę Car z polami: brand, model i speed. Napisz metody accelerate(int value) i decelerate(int value), które odpowiednio zwiększają i zmniejszają prędkość o podaną wartość. Stwórz przypadek testowy, aby wywołać każdą metodę co najmniej jeden raz.
public class Car
{
    public String brand;
    public String model;
    public int speed;

    public void accelerate(int value) {
        if (value > 0) {
            speed += value;
            System.out.println("Przyspiesza" + value + " km/h, predkosc" + speed + " km/h.");
        } else {
            System.out.println("Nieprawidlowa wartosc");
        }
    }

    public void decelerate(int value) {
        if (value > 0 && speed >= value) {
            speed -= value;
            System.out.println("Zwlania" + value + " km/h. Obecna predkosc: " + speed + " km/h");
        } else if (value > 0) {
            System.out.println("nieprawidlowa predkosc");
        } else {
            System.out.println("nieprwaidlowa predkosc");
        }
    }
}


public class Main
{
    public static void main(String[] args)
    {
        Car myCar = new Car();
        myCar.brand = "Subaru";
        myCar.model = "Impreza";

        myCar.accelerate(50);
        myCar.accelerate(20);
        myCar.decelerate(10);
        myCar.decelerate(30);
        myCar.accelerate(-10);
        myCar.decelerate(70);
    }
}
//Stwórz klasę Time z polami: hours i minutes. Napisz metodę addTime(Time otherTime), która dodaje do bieżącego czasu czas podany jako argument i zwraca nowy obiekt klasy Time. Zadbaj o to, aby minuty i godziny nie przekraczały odpowiednio 59 i 23. Stwórz przypadek testowy, aby wywołać metodę co najmniej jeden raz.
public class Time {
    private int hours;
    private int minutes;

    public Time(int hours, int minutes) {
        this.hours = hours;
        this.minutes = minutes;
    }

    public Time addTime(Time otherTime) {
        int newMinutes = this.minutes + otherTime.minutes;
        int newHours = this.hours + otherTime.hours;

        if (newMinutes >= 60) {
            newMinutes -= 60;
            newHours++;
        }

        newHours = newHours % 24;  // Ograniczenie na godziny do 0-23

        return new Time(newHours, newMinutes);
    }
    public String toString() {
        return String.format("%02d:%02d", hours, minutes);
    }

    public static void main(String[] args) {
        Time currentTime = new Time(10, 30);
        Time otherTime = new Time(3, 45);

        System.out.println("Current Time: " + currentTime);
        System.out.println("Other Time: " + otherTime);

        Time newTime = currentTime.addTime(otherTime);
        System.out.println("New Time after addition: " + newTime);
    }
}
 //Wykonaj po kolei dwa podpunkty:
 //A. Stwórz klasę Car zawierającą pole brand. W klasie Main, utwórz obiekt klasy Car, przypisz mu wartość null i spróbuj odwołać się do pola brand. Jaki jest wynik?

Car asterka = null;
/*System.out.println(asterka.brand);*/
// Exception in thread "main" java.lang.NullPointerException: Cannot read field "brand" because "asterka" is null

//B. Zmodyfikuj kod z podpunktu A tak, aby sprawdzić, czy obiekt Car jest null przed odwołaniem się do pola brand. Jaki jest wynik?
try{
    System.out.println(asterka.brand);
}catch(NullPointerException e){
    System.out.println("asterka jest null wiec brand nie dziala");
}
//Stwórz obiekt klasy Dog z zadania pierwszego, i ustaw jego wartość na null. Spróbuj wykonać metodę  bark() na tym obiekcie.
Dog pies2 = null;
/*pies2.bark();*/
//Exception in thread "main" java.lang.NullPointerException: Cannot invoke "Dog.bark()" because "pies2" is null

///////////////////////////////////////////////////
//Wykonaj kolejno poniższe czynności:
//Stwórz klasę Czlowiek z polem imie. Dodaj do klasy metodę przedstawSie, która wyświetli wiadomość “Cześć, jestem” i imię osoby. W klasie Main, utwórz obiekt Czlowiek i wywołaj na nim metodę przedstawSie. Czy musisz użyć słowo kluczowe this w implementacji metody?
public class Main
{
    public static void main(String[] args)
    {
        Czlowiek czlowiek = new Czlowiek("Jan");
        czlowiek.przedstawSie();
    }
}

public class Czlowiek
{
    public String imie;

    public Czlowiek(String imie)
    {
        this.imie = imie;
    }

    public void przedstawSie()
    {
        System.out.println("Cześć, jestem " + imie);
    }
}

//Dodaj do klasy Czlowiek metodę powiedzCzesc, która jako argument przyjmuje inny obiekt klasy Czlowiek i wyświetla wiadomość “Cześć,” i imię drugiego człowieka. Przeanalizuj działanie.
public class Main
{
    public static void main(String[] args)
    {
        Czlowiek czlowiek = new Czlowiek("Jan");
        czlowiek.przedstawSie();

        Czlowiek arnold = new Czlowiek("Arnold");
        Czlowiek anna = new Czlowiek("Anna");

        arnold.przedstawSie();
        anna.przedstawSie();

        arnold.powiedzCzesc(anna);
        anna.powiedzCzesc(arnold);
    }
}

public class Czlowiek
{
    public String imie;

    public Czlowiek(String imie)
    {
        this.imie = imie;
    }

    public void przedstawSie()
    {
        System.out.println("Cześć, jestem " + imie);
    }
    public void powiedzCzesc(Czlowiek innyCzlowiek) {
        System.out.println("Cześć, " + innyCzlowiek.imie);
    }
}
//Dodaj do klasy Czlowiek metodę zmienImie, która jako argument przyjmuje łańcuch znaków i przypisuje go do pola imie. Utwórz obiekt Czlowiek i użyj metody zmienImie do zmiany jego imienia. Następnie wywołaj metodę przedstawSie. Czy imię zostało zmienione? Czy musisz użyć słowo kluczowe this w implementacji metody?
 public void zmienImie(String noweImie) {
        imie = noweImie;
    }

    public static void main(String[] args) {
        Czlowiek jan = new Czlowiek("Jan");
        jan.przedstawSie();

        jan.zmienImie("Marek"); // Zmieniamy imię na "Marek"
        jan.przedstawSie(); // Wywołujemy ponownie przedstawSie, aby sprawdzić zmianę imienia
    }
//Dodaj do klasy Czlowiek metodę zamienImionami, która jako argument przyjmuje inny obiekt klasy Czlowiek i zamienia imionami obie osoby. Utwórz dwa obiekty Czlowiek i użyj metody zamienImionami do zamiany ich imion. Następnie wywołaj metodę przedstawSie na obu obiektach. Czy imiona zostały zamienione?
public void zamienImionami(Czlowiek innyCzlowiek) {
        String temp = this.imie;
        this.imie = innyCzlowiek.imie;
        innyCzlowiek.imie = temp;
    }

    public static void main(String[] args) {
        Czlowiek jan = new Czlowiek("Jan");
        Czlowiek anna = new Czlowiek("Anna");

        jan.przedstawSie();
        anna.przedstawSie();

        jan.zamienImionami(anna);

        System.out.println("Po zamianie imion:");
        jan.przedstawSie();
        anna.przedstawSie();
    }

//Wykonaj kolejno poniższe czynności:
       
//Stwórz klasę Licznik z jednym polem liczba. Dodaj do klasy metodę zwieksz, która przyjmuje parametr typu int i zwiększa wartość pola liczba o wartość tego parametru. W klasie Main, utwórz zmienną typu int, przekaż ją do metody zwieksz i sprawdź, czy wartość zmiennej zmieniła się po wywołaniu metody.
       public class Licznik {
    private int liczba;

    public void zwieksz(int wartosc) {
        liczba += wartosc;
    }

    public int getLiczba() {
        return liczba;
    }

    public static void main(String[] args) {
        Licznik licznik = new Licznik();
        int wartosc = 5;
        licznik.zwieksz(wartosc);
        System.out.println("Wartość pola liczba: " + licznik.getLiczba());
    }
}
//Dodaj do klasy Licznik metodę dodaj, która przyjmuje inny obiekt Licznik i dodaje wartość jego pola liczba do pola liczba bieżącego obiektu. Utwórz dwa obiekty Licznik w klasie Main i użyj metody dodaj. Sprawdź, czy obiekt przekazany jako argument metody dodaj zmienił swoją wartość po wywołaniu metody.
        public class Licznik {
    private int liczba;

    public void dodaj(Licznik innyLicznik) {
        liczba += innyLicznik.liczba;
    }

    public int getLiczba() {
        return liczba;
    }

    public static void main(String[] args) {
        Licznik licznik1 = new Licznik();
        licznik1.liczba = 10;
        Licznik licznik2 = new Licznik();
        licznik2.liczba = 20;

        licznik1.dodaj(licznik2);

        System.out.println("Wartość pola liczba w licznik1 po dodaniu: " + licznik1.getLiczba());
    }
}
 zjebane //Stwórz klasę Zmieniacz, która posiada metodę zmienWartosc, która jako argument przyjmuje typ int. Wewnątrz metody zmień wartość argumentu na inną. W klasie Main utwórz zmienną int, a następnie przekaż ją do metody zmienWartosc i sprawdź, czy wartość zmiennej się zmieniła.
public class Zmieniacz {
    public void zmienWartosc(int wartosc) {
        wartosc = 42;
    }

    public static void main(String[] args) {
        int zmienna = 10;
        Zmieniacz zmieniacz = new Zmieniacz();
        zmieniacz.zmienWartosc(zmienna);

        System.out.println("Wartość zmiennej po wywołaniu metody zmienWartosc: " + zmienna);
    }
}
//Dodaj do klasy Zmieniacz metodę zmienObiekt, która jako argument przyjmuje obiekt Licznik. Wewnątrz metody zmień wartość pola liczba obiektu Licznik na inną. W klasie Main utwórz obiekt Licznik, a następnie przekaż go do metody zmienObiekt i sprawdź, czy wartość pola liczba obiektu się zmieniła.
     public class Zmieniacz {
    public void zmienObiekt(Licznik licznik) {
        licznik.liczba = 42;
    }

    public static void main(String[] args) {
        Licznik licznik = new Licznik();
        Zmieniacz zmieniacz = new Zmieniacz();
        zmieniacz.zmienObiekt(licznik);

        System.out.println("Wartość pola liczba w obiekcie Licznik po wywołaniu metody zmienObiekt: " + licznik.getLiczba());
    }
}
  
//Utwórz klasę Osoba z publicznym polem imie oraz prywatnym polem haslo. Zobacz jak różne modyfikatory dostępu wpływają na dostęp do tych pól z innej klasy.
public class Osoba {
    public String imie;
    private String haslo;
}

public class InnaKlasa {
    public static void main(String[] args) {
        Osoba osoba = new Osoba();
        osoba.imie = "Jan"; // Dostęp do publicznego pola imie jest dozwolony
        // osoba.haslo = "TajneHaslo"; // To spowoduje błąd kompilacji, ponieważ haslo jest prywatne
    }
}

//Do klasyCar dodaj prywatną metodę blowEngine(). Spróbuj ją wywołać na dowolnym istniejącym obiekcie w innej klasie.

public class Car {
    private void blowEngine() {
        System.out.println("Silnik wybuchł!");
    }

    public static void main(String[] args) {
        Car car = new Car();
        // car.blowEngine(); // To spowoduje błąd kompilacji, ponieważ metoda blowEngine() jest prywatna i nie jest dostępna z innej klasy
    }
}
//Stwórz klasę Trener, która jest zadeklarowana jako private. Spróbuj stworzyć obiekt Trener w klasie Main. Jaki jest rezultat?

private class Trener {
    // Kod klasy Trener
}

public class Main {
    public static void main(String[] args) {
        // Trener trener = new Trener(); // To spowoduje błąd kompilacji, ponieważ klasa Trener jest zadeklarowana jako private i nie jest dostępna z zewnątrz
    }
}
