rekordy, hashe

import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {

        Person person = new Person("Stefan", 30);
        Person person2 = new Person("Stefan", 30);
        System.out.println(person);
        System.out.println(person.equals(person2));
        person.greet();

        //Book
        BookDTO book1 = new BookDTO("Dziady", "Adam Mickiewicz", 20.5, 2015);
        BookDTO book2 = new BookDTO("tytul2", "autor2", 25.5, 2019);
        System.out.println(book1);
        System.out.println(book2);

        //Address
        Address ad1 = new Address("Prosta", 1, 10234, "Poznan");
        Person2 p2 = new Person2("Jan", "Nowak", ad1);
        System.out.println(p2);

        //Student
        ArrayList<Integer> oceny = new ArrayList<>();
        oceny.add(4);
        oceny.add(5);
        oceny.add(2);
        Student student = new Student("Jan", "Kowalski", oceny);
        student.averageGrades();


        //Order
        Product product1 = new Product("Mleko", 6.00);
        Product product2 = new Product("Chleb", 7.50);
        Product product3 = new Product("Piwo", 3.49);
        ArrayList<Product> produkty = new ArrayList<>();
        produkty.add(product1);
        produkty.add(product2);
        produkty.add(product3);
        Order order = new Order(produkty);
        System.out.println(order);
        order.totalValue();
    }
}
//Stwórz rekord BookDTO, który reprezentuje książkę w sklepie internetowym. Powinien zawierać takie informacje jak title, author, price i yearOfPublication. 
Następnie stwórz kilka instancji tego rekordu, reprezentujących różne książki.

Plik BookDTO.java
public record BookDTO(String title, String author, double price, int yearOfPublication)
{


}

Plik person.java
public record Person(String name, int age) {
    public Person{
        if(name.isBlank() || name == null){
            name = "unknown";
        }
        if(age < 0){
            age = 0;
        }
    }

    Person(String name){
        this(name, 0);
    }

    public void greet(){
        System.out.println("Czesc!");
    }

}
Plik person2.java
public record Person2(String firstName, String lastName, Address adres)
{

}


TEST
public class Animal {
    public int age;
    public double weight;
    public String name;

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Animal animal = (Animal) o;
        return age == animal.age && Double.compare(weight, animal.weight) == 0 && Objects.equals(name, animal.name);
    }

    //nie bedzie na kolosie
    @Override
    public int hashCode() {
        //return Objects.hash(age, weight, name);
        int result = 17;
        result = 31 * result + age;
        result = 31 * result +
                (int)(Double.doubleToLongBits(weight) ^
                        (Double.doubleToLongBits(weight) >>> 32));
        result = 31 * result + name.hashCode();
        return result;
    }
}

//BankAccount, który zawiera numer konta oraz saldo. Dodaj konstruktor, który pozwala na tworzenie konta tylko z numerem, 
//przy czym domyślne saldo wynosi 0. Stwórz przypadek testowy.

public record BankAccount(String accountNumber, double balance) {
    // Konstruktor z domyślnym saldem 0
    public BankAccount(String accountNumber) {
        this(accountNumber, 0);
    }

    // Przypadek testowy
    public static void main(String[] args) {
        BankAccount account1 = new BankAccount("1234567890");
        System.out.println("Account Number: " + account1.accountNumber() + ", Balance: " + account1.balance());
    }
}

//MusicTrack, który opisuje tytuł, artystę i czas trwania utworu w sekundach. Dodaj konstruktor, który przyjmuje tylko tytuł i artystę, przyjmując domyślną długość utworu jako 180 sekund. Stwórz przypadek testowy.
public record MusicTrack(String title, String artist, int durationInSeconds) {

    // Konstruktor z domyślną długością utworu (180 sekund)
    public MusicTrack(String title, String artist) {
        this(title, artist, 180);
    }

    // Przypadek testowy
    public static void main(String[] args) {
        MusicTrack track1 = new MusicTrack("In the End", "Linkin Park");
        System.out.println("Track 1: " + track1);

        MusicTrack track2 = new MusicTrack("Shape of You", "Ed Sheeran", 240);
        System.out.println("Track 2: " + track2);
    }
}

//Stwórz rekord Car, który zawiera brand, model i fuelConsumptionPer100km. Dodaj metodę fuelCost(double fuelPrice, double distance), która oblicza i zwraca koszt podróży na podstawie podanej ceny paliwa oraz dystansu. Stwórz przypadek testowy.

public record Car(String brand, String model, double fuelConsumptionPer100km) {
    public double fuelCost(double fuelPrice, double distance) {
        double fuelNeeded = (fuelConsumptionPer100km / 100) * distance;
        return fuelNeeded * fuelPrice;
    }

    // Przypadek testowy
    public static void main(String[] args) {
        Car myCar = new Car("Toyota", "Camry", 7.5);
        double fuelPrice = 4.5; // cena paliwa za litr
        double distance = 200; // dystans w kilometrach

        double cost = myCar.fuelCost(fuelPrice, distance);
        System.out.println("Cost of the trip: $" + cost);
    }
}

//Utwórz rekord Address, który zawiera street, houseNumber, postalCode i city. Następnie, stwórz rekord Person, 
//który oprócz podstawowych informacji o osobie (np. firstName, lastName) zawiera również pole typu Address. Stwórz przypadek testowy.
public record Address(String street, int houseNumber, int postalCode, String city)
{


}

Address ad1 = new Address("Prosta", 1, 10234, "Poznan");
        Person2 p2 = new Person2("Jan", "Nowak", ad1);
        System.out.println(p2);

//Stwórz rekord BankAccount, który zawiera numer konta oraz saldo. Dodaj konstruktor, który pozwala na tworzenie konta tylko z numerem, przy czym domyślne saldo wynosi 0. Stwórz przypadek testowy.

public class BankAccount {
    private String accountNumber;
    private double balance;

    // Konstruktor z domyślnym saldem równym 0
    public BankAccount(String accountNumber) {
        this.accountNumber = accountNumber;
        this.balance = 0;
    }

    // Konstruktor z podanym saldem
    public BankAccount(String accountNumber, double initialBalance) {
        this.accountNumber = accountNumber;
        this.balance = initialBalance;
    }

    // Metoda do pobierania numeru konta
    public String getAccountNumber() {
        return accountNumber;
    }

    // Metoda do pobierania salda
    public double getBalance() {
        return balance;
    }

    // Przykładowy test
    public static void main(String[] args) {
        // Tworzymy konto bez podawania salda (domyślne saldo to 0)
        BankAccount account1 = new BankAccount("1234567890");

        // Wyświetlamy informacje o koncie
        System.out.println("Numer konta: " + account1.getAccountNumber());
        System.out.println("Saldo: " + account1.getBalance());

        // Tworzymy konto z podanym saldem
        BankAccount account2 = new BankAccount("0987654321", 1000.0);

        // Wyświetlamy informacje o drugim koncie
        System.out.println("Numer konta: " + account2.getAccountNumber());
        System.out.println("Saldo: " + account2.getBalance());
    }
}
//Stwórz rekord MusicTrack, który opisuje tytuł, artystę i czas trwania utworu w sekundach. Dodaj konstruktor, który przyjmuje tylko tytuł i artystę, przyjmując domyślną długość utworu jako 180 sekund. Stwórz przypadek testowy.

public class MusicTrack {
    private String title;
    private String artist;
    private int durationInSeconds;

    // Konstruktor z domyślną długością utworu (180 sekund)
    public MusicTrack(String title, String artist) {
        this.title = title;
        this.artist = artist;
        this.durationInSeconds = 180;
    }

    // Konstruktor z podaną długością utworu
    public MusicTrack(String title, String artist, int durationInSeconds) {
        this.title = title;
        this.artist = artist;
        this.durationInSeconds = durationInSeconds;
    }

    // Metoda do pobierania tytułu utworu
    public String getTitle() {
        return title;
    }

    // Metoda do pobierania artysty utworu
    public String getArtist() {
        return artist;
    }

    // Metoda do pobierania długości utworu w sekundach
    public int getDurationInSeconds() {
        return durationInSeconds;
    }

    // Przykładowy test
    public static void main(String[] args) {
        // Tworzymy utwór bez podawania długości (domyślna długość to 180 sekund)
        MusicTrack track1 = new MusicTrack("Song Title", "Artist Name");

        // Wyświetlamy informacje o utworze
        System.out.println("Tytuł: " + track1.getTitle());
        System.out.println("Artysta: " + track1.getArtist());
        System.out.println("Długość utworu: " + track1.getDurationInSeconds() + " sekundy");

        // Tworzymy utwór z podaną długością
        MusicTrack track2 = new MusicTrack("Another Song", "Another Artist", 240);

        // Wyświetlamy informacje o drugim utworze
        System.out.println("Tytuł: " + track2.getTitle());
        System.out.println("Artysta: " + track2.getArtist());
        System.out.println("Długość utworu: " + track2.getDurationInSeconds() + " sekundy");
    }
}

//Stwórz rekord Car, który zawiera brand, model i fuelConsumptionPer100km. Dodaj metodę fuelCost(double fuelPrice, double distance), która oblicza i zwraca koszt podróży na podstawie podanej ceny paliwa oraz dystansu. Stwórz przypadek testowy.
public class Car {
    private String brand;
    private String model;
    private double fuelConsumptionPer100km;

    // Konstruktor
    public Car(String brand, String model, double fuelConsumptionPer100km) {
        this.brand = brand;
        this.model = model;
        this.fuelConsumptionPer100km = fuelConsumptionPer100km;
    }

    // Metoda do obliczania kosztu podróży
    public double fuelCost(double fuelPrice, double distance) {
        double fuelNeeded = (fuelConsumptionPer100km / 100) * distance;
        return fuelNeeded * fuelPrice;
    }

    // Przykładowy test
    public static void main(String[] args) {
        // Tworzymy samochód
        Car myCar = new Car("Toyota", "Camry", 8.5);

        // Obliczamy koszt podróży dla ceny paliwa 4.50 zł i odległości 200 km
        double fuelPrice = 4.50;
        double distance = 200.0;
        double cost = myCar.fuelCost(fuelPrice, distance);

        // Wyświetlamy informacje o koszcie podróży
        System.out.println("Koszt podróży: " + cost + " zł");
    }
}
