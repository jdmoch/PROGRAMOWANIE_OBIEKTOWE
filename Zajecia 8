Przykladowe

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class oosoba implements Comparable<oosoba>, Cloneable
{
    String name;
    double height;
    int age;

    public oosoba(String name, double height, int age) {
        this.name = name;
        this.height = height;
        this.age = age;
    }

    public oosoba(int age) {
        this.age = age;
        name = "Jan";
        height = 170;
    }

    public oosoba(double height) {
        this.height = height;
    }

    public oosoba(double height, int age) {
        this.height = height;
        this.age = age;
    }

    @Override
    public String toString()
    {
        return " " + height+" "+age + " ";
    }

    public static void main(String[] args)
    {
        ArrayList<oosoba> oosobaList = new ArrayList<>();
        oosobaList.add(new oosoba(156.0, 15));
        oosobaList.add(new oosoba(158.0,18));
        oosobaList.add(new oosoba(156.0, 24));
        oosobaList.add(new oosoba(176.0,18));
        System.out.println(oosobaList);
        //Collections.sort(oosobaList,new oosobaHeightComparator());
        oosobaList.sort(new oosobaHeightComparator());
        System.out.println(oosobaList);
        ArrayList<oosoba> oosobaList2 = new ArrayList<>();
        oosobaList2.add(new oosoba(156.0, 15));
        oosobaList2.add(new oosoba(158.0,18));
        oosobaList2.add(new oosoba(156.0, 24));
        oosobaList2.add(new oosoba(176.0,18));
        //Collections.sort(oosobaList2,new oosobaAgeComparator().reversed());
        oosobaList2.sort(new oosobaAgeComparator());
        System.out.println(oosobaList2);

    }
    @Override
    public int compareTo(oosoba o)
    {
        //return Double.compare(o.height,this.height);
        //return (int) Math.signum(o.height - this.height);
        if (Double.compare(o.height,this.height) == 0)
        {
            return Integer.compare(o.age,this.age);
        }
        return Double.compare(o.height,this.height);
    }

    @Override
    protected Object clone() throws CloneNotSupportedException
    {
        return super.clone();
    }
}
class oosobaHeightComparator implements Comparator<oosoba>
{

    @Override
    public int compare(oosoba o1, oosoba o2) {
        return Double.compare(o2.height, o1.height); //O2 na poczatku = od najwyzszych
    }
}
class oosobaAgeComparator implements Comparator<oosoba>
{

    @Override
    public int compare(oosoba o1, oosoba o2) {
        return Integer.compare(o2.age,o1.age);
    }
}

INNY MAIN

public class Main {
    public static void main(String[] args) throws CloneNotSupportedException
    {
        oosoba o1 = new oosoba("Stefan",182,21);
        oosoba o2 = (oosoba) o1.clone();
        System.out.println(o1 + " " + o2);
        o2.age=95;
        System.out.println(o1 + " " + o2);
    }

}

Zad.1
Napisz klasę Ksiazka, która zawiera pola: tytul (typu String), liczbaStron (typu int) i dataWydania (typu LocalDate). 
Zaimplementuj interfejs Comparable w taki sposób, aby obiekty klasy Ksiazka były sortowane malejąco według liczby stron. 
Stwórz tablicę 4 obiektów klasy Ksiazka i posortuj ją według sprecyzowanego kryterium.


